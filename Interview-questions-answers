1. Question: Write a function that reverses a given string.
function reverseString(str) {
  return str.split('').reverse().join('');
}
console.log(reverseString('Hello'));
// Output: 'olleH'
-----------------------------------------------------------------
2.Question: Write a function that finds the longest word in a sentence.
function findLongestWord(sentence) {
  const words = sentence.split(' ');
  let longestWord = '';
  for (let i = 0; i < words.length; i++) {
    if (words[i].length > longestWord.length) {
      longestWord = words[i];
    }
  }
  return longestWord;
}
console.log(findLongestWord('The quick brown fox jumps over the lazy dog'));
// Output: 'quick'
-----------------------------------------------------------------
3.Question: Write a function that removes duplicates from an array.
function removeDuplicates(arr) {
  return [...new Set(arr)];
}
console.log(removeDuplicates([1, 2, 2, 3, 4, 4, 5]));
// Output: [1, 2, 3, 4, 5]
-----------------------------------------------------------------
4. Question: Given an array containing numbers from 1 to N, with one number missing, find the missing number.
function findMissingNumber(arr) {
  const n = arr.length + 1;(added 1 because that number is missing)
  const Expectedsum = (n * (n + 1)) / 2;
  const ActualarrSum = arr.reduce((acc, curr) => acc + curr, 0);
  return Expectedsum - ActualarrSum;
}
console.log(findMissingNumber([1, 2, 3, 5]));
// Output: 4
-----------------------------------------------------------------
5. Question: Write a function that checks if a given string is a palindrome.
function isPalindrome(str) {
  const reversedStr = str.split('').reverse().join('');
  return str === reversedStr;
}
console.log(isPalindrome('level'));
// Output: true
-----------------------------------------------------------------
6. Question: What will be the output of the following code?
for (var i = 1; i <= 5; i++) {
  setTimeout(function() {
    console.log(i);
  }, 1000);
}
Answer: The output will be five instances of the number 6.
-----------------------------------------------------------------
7.Question: What will be the output of the following code?
for (var i = 1; i < 5; i++) {
  setTimeout(function() {
    console.log(i);
  }, 1000);
}
Answer: The output will be five instances of the number 5.
-----------------------------------------------------------------
8. How to empty an array in javascript?
  1. array=[]
  2. array.length=0
  3. array.splice(0, arr.length)
  4. while(array.length){
    array.pop()
    }
-----------------------------------------------------------------
9. How would you check if a number is a integer or decimal?
   number % 1 === 0 //true
-----------------------------------------------------------------
10. Write a "mul"function which will properly when invoked as below syntax.
console.log(mul(2)(3)(4)); // output :: 24
console.log(mul(4)(3)(4))/// output :: 48
function mul(a){
  return function (b){
    return function (c){
      return a*b*c
    }
  }
}
Here mul function accept the first argument and return anonymous
function which take the second parameter and return anonymous function
which take the third parameter and return multiplication of arguments
which is being passed in successive
-----------------------------------------------------------------
11. Class Component in Reactjs:
    1. We can initiatise the state inside a constructor function.
    2. Super() method or function is used to execute the parent class constructor.
    3. The constructor is called during the component creation and before mounting.
    4. The constructor is also used to bind the event handlers.
    5. this.state scope is not in any of the block, it's inside class component.
Link: https://www.youtube.com/watch?v=JiO0dXP3YLA&list=PLsuIm95J7Lco58PVaz6c1ssCwHy8GaxHa&index=3
-----------------------------------------------------------------
12. Why is it require to have a callback function at onClick in Reactjs, such as, onClick={()=>this.increment()}
   1. If we call like onClick={this.increment()}, then it will not wait for any user's action like click. As soon as page refresh it also get render.Then it will be a infinite loop.
   2. In lexical scopping we need to use the arrow function(callback function) at OnClick, otherwise it will give an error that setState() is undefined.
   3. There are 2 ways to create a arrow function while onClick.
      3.a onClick={()=> handleClick()} OR
      3.b increment = () => {}
   4. If we don't want to use the callaback(Arrow function then we can use conventional way i.e, with .bind() inside the constructor.
   5. setState is a asyn so immediately not getting a updated value.
   6. second parameneter of the setState contain the updated value, which we can take with arrow function, i.e called a callback function.
-----------------------------------------------------------------
13. Functional Component in Reactjs:
    1. In Functional Component, state introduced by Hooks.
    2. Hooks are used to state and the life cycle methods in a functional component.
    3. In functional component, we have multiple states, but in class component we have single state in which the one object contain multiple values.
-----------------------------------------------------------------
14. What is state and Props ?
    1. State is an object where you store the property that belongs to the component.
    2. Props are the properties which are passed to the components externally.
    3. "Props" contains all the props value so we can directly destructure at the function firts line like
       const MyComponent = ({name, age}) =>{}
       or 
       const MyComponent = (props) =>{
         const {name, age} = props;
       }
    4. In class based component, we can access like {this.props.name}.
    5. To access the props in class based component then we need to pass the props at constructor() and super() method.
    6. Stae is inside the component, while props are outside the component.
    7. With Props, we are making the components reusable.
    8. State controls the component internally, while props do externally.
    9. State can be change inside the component, but props can't change/modified at inside the component.
-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------
